class CasesManager {
    constructor() {
        this.initEventListeners();
    }

    initEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    }

    async loadCases() {
        try {
            Utils.showLoading();
            cases = await Utils.makeRequest('/api/cases');
            this.displayCases();
        } catch (error) {
            console.error('Failed to load cases:', error);
        } finally {
            Utils.hideLoading();
        }
    }

    displayCases() {
        const casesGrid = document.getElementById('cases-grid');
        
        if (cases.length === 0) {
            casesGrid.innerHTML = `
                <div class="empty-cases">
                    <div class="empty-icon">üéÅ</div>
                    <p>–ö–µ–π—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
                </div>
            `;
            return;
        }

        casesGrid.innerHTML = cases.map(caseItem => `
            <div class="case-item" data-case-id="${caseItem._id}">
                <img src="${caseItem.image}" alt="${caseItem.name}" class="case-image">
                <h3 class="case-name">${caseItem.name}</h3>
                <p class="case-price">${Utils.formatNumber(caseItem.price)} –º–æ–Ω–µ—Ç</p>
                <p class="case-items-count">–û—Ç–∫—Ä—ã—Ç–æ: ${Utils.formatNumber(caseItem.totalOpened || 0)} —Ä–∞–∑</p>
                <button class="neon-button case-open-button" onclick="openCase('${caseItem._id}')">
                    –û—Ç–∫—Ä—ã—Ç—å –∑–∞ ${Utils.formatNumber(caseItem.price)} ‚Ç™
                </button>
            </div>
        `).join('');

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø—É—Å—Ç—ã—Ö –∫–µ–π—Å–æ–≤
        if (!document.querySelector('.empty-cases-style')) {
            const style = document.createElement('style');
            style.className = 'empty-cases-style';
            style.textContent = `
                .empty-cases {
                    grid-column: 1 / -1;
                    text-align: center;
                    padding: 60px 20px;
                    color: var(--text-secondary);
                }
                .empty-icon {
                    font-size: 64px;
                    margin-bottom: 20px;
                    opacity: 0.5;
                }
            `;
            document.head.appendChild(style);
        }
    }

    async openCase(caseId) {
        if (!currentUser) {
            Utils.showNotification('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'error');
            return;
        }

        const caseItem = cases.find(c => c._id === caseId);
        if (!caseItem) {
            Utils.showNotification('–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        if (currentUser.balance < caseItem.price) {
            Utils.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
            return;
        }

        try {
            Utils.showLoading();
            const response = await Utils.makeRequest('/api/cases/open', {
                method: 'POST',
                body: JSON.stringify({ caseId })
            });

            if (response.success) {
                this.showCaseOpeningAnimation(caseItem, response.item);
            }
        } catch (error) {
            console.error('Failed to open case:', error);
        } finally {
            Utils.hideLoading();
        }
    }

    showCaseOpeningAnimation(caseItem, wonItem) {
        // –°–æ–∑–¥–∞–µ–º overlay –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const overlay = document.createElement('div');
        overlay.className = 'case-opening-overlay';
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            z-index: 4000;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        `;

        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–µ–π—Å–∞
        overlay.innerHTML = `
            <div class="case-opening-animation">
                <img src="${caseItem.image}" alt="${caseItem.name}" class="case-animation-image">
                <div class="case-shine"></div>
            </div>
            <div class="prize-reveal">
                <h3>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
                <img src="${wonItem.image}" alt="${wonItem.name}" class="prize-image-large">
                <h4>${wonItem.name}</h4>
                <p>–°—Ç–æ–∏–º–æ—Å—Ç—å: ${Utils.formatNumber(wonItem.price)} –º–æ–Ω–µ—Ç</p>
            </div>
            <div class="animation-actions">
                <button class="neon-button" onclick="closeCaseAnimation()">–ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑</button>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        const style = document.createElement('style');
        style.textContent = `
            .case-opening-animation {
                position: relative;
                animation: caseBounce 1s ease-in-out infinite;
            }
            
            .case-animation-image {
                width: 200px;
                height: 200px;
                filter: drop-shadow(0 0 20px var(--neon-purple));
            }
            
            .case-shine {
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
                animation: shine 2s ease-in-out infinite;
            }
            
            .prize-reveal {
                text-align: center;
                margin: 30px 0;
                animation: fadeIn 1s ease;
            }
            
            .prize-image-large {
                width: 120px;
                height: 120px;
                object-fit: contain;
                filter: drop-shadow(0 0 15px var(--neon-green));
                margin: 15px 0;
            }
            
            @keyframes caseBounce {
                0%, 100% { transform: translateY(0); }
                50% { transform: translateY(-20px); }
            }
            
            @keyframes shine {
                0% { left: -100%; }
                100% { left: 100%; }
            }
        `;

        document.head.appendChild(style);
        document.body.appendChild(overlay);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 7 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (overlay.parentElement) {
                closeCaseAnimation();
            }
        }, 7000);
    }
}

function closeCaseAnimation() {
    const overlay = document.querySelector('.case-opening-overlay');
    if (overlay) {
        overlay.remove();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–∑–∞
    showPrizeModal(window.currentPrize);
}

function showPrizeModal(item) {
    document.getElementById('prize-image').src = item.image;
    document.getElementById('prize-name').textContent = item.name;
    document.getElementById('prize-value').textContent = `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${Utils.formatNumber(item.price)} –º–æ–Ω–µ—Ç`;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.getElementById('sell-prize').onclick = () => sellPrize(item._id);
    document.getElementById('keep-prize').onclick = () => keepPrize(item._id);
    
    showModal('prize-modal');
}

async function sellPrize(itemId) {
    try {
        Utils.showLoading();
        const response = await Utils.makeRequest('/api/inventory/sell', {
            method: 'POST',
            body: JSON.stringify({ itemId })
        });

        if (response.success) {
            updateBalance(response.newBalance);
            Utils.showNotification('–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω!', 'success');
            closeModal('prize-modal');
            await loadInventory();
        }
    } catch (error) {
        console.error('Failed to sell item:', error);
    } finally {
        Utils.hideLoading();
    }
}

async function keepPrize(itemId) {
    try {
        Utils.showLoading();
        const response = await Utils.makeRequest('/api/inventory/keep', {
            method: 'POST',
            body: JSON.stringify({ itemId })
        });

        if (response.success) {
            Utils.showNotification('–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!', 'success');
            closeModal('prize-modal');
            await loadInventory();
        }
    } catch (error) {
        console.error('Failed to keep item:', error);
    } finally {
        Utils.hideLoading();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
function openCase(caseId) {
    casesManager.openCase(caseId);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–µ–π—Å–æ–≤
let casesManager;

document.addEventListener('DOMContentLoaded', () => {
    casesManager = new CasesManager();
});