class InventoryManager {
    constructor() {
        this.initEventListeners();
    }

    initEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    }

    async loadInventory() {
        try {
            Utils.showLoading();
            const response = await Utils.makeRequest('/api/inventory/stats');
            userInventory = response.inventory || [];
            this.displayInventory(response);
        } catch (error) {
            console.error('Failed to load inventory:', error);
        } finally {
            Utils.hideLoading();
        }
    }

    displayInventory(stats) {
        const inventoryGrid = document.getElementById('inventory-grid');
        const totalItems = document.getElementById('total-items');
        const totalValue = document.getElementById('total-value');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        totalItems.textContent = Utils.formatNumber(stats.activeItems || 0);
        totalValue.textContent = Utils.formatNumber(stats.totalValue || 0);

        if (!userInventory || userInventory.length === 0) {
            inventoryGrid.innerHTML = `
                <div class="empty-inventory">
                    <div class="empty-inventory-icon">üéí</div>
                    <p class="empty-inventory-text">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>
                    <p class="empty-inventory-subtext">–û—Ç–∫—Ä–æ–π—Ç–µ –∫–µ–π—Å—ã –∏–ª–∏ –ø–æ–∫—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑—ã!</p>
                </div>
            `;
            return;
        }

        inventoryGrid.innerHTML = userInventory.map(item => `
            <div class="inventory-item item-rarity-${item.itemId?.rarity || 'common'}">
                <img src="${item.itemId?.image || item.itemImage}" alt="${item.itemId?.name || item.itemName}" class="item-image">
                <h4 class="item-name">${item.itemId?.name || item.itemName}</h4>
                <p class="item-price">${Utils.formatNumber(item.itemId?.price || item.itemPrice)} –º–æ–Ω–µ—Ç</p>
                <p class="item-obtained">–ü–æ–ª—É—á–µ–Ω: ${Utils.formatDate(item.obtainedAt)}</p>
                <div class="item-actions">
                    <button class="item-action-button sell-item-button" onclick="sellInventoryItem('${item._id}')">
                        –ü—Ä–æ–¥–∞—Ç—å
                    </button>
                    <button class="item-action-button withdraw-item-button" onclick="withdrawItem('${item._id}')">
                        –í—ã–≤–µ—Å—Ç–∏
                    </button>
                </div>
            </div>
        `).join('');
    }

    async sellInventoryItem(itemId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç?')) return;

        try {
            Utils.showLoading();
            const response = await Utils.makeRequest('/api/inventory/sell', {
                method: 'POST',
                body: JSON.stringify({ itemId })
            });

            if (response.success) {
                updateBalance(response.newBalance);
                Utils.showNotification('–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω!', 'success');
                await this.loadInventory();
            }
        } catch (error) {
            console.error('Failed to sell item:', error);
        } finally {
            Utils.hideLoading();
        }
    }

    async withdrawItem(itemId) {
        const item = userInventory.find(i => i._id === itemId);
        if (!item) return;

        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç "${item.itemId?.name || item.itemName}"?`)) return;

        try {
            Utils.showLoading();
            const response = await Utils.makeRequest('/api/inventory/withdraw', {
                method: 'POST',
                body: JSON.stringify({ itemId })
            });

            if (response.success) {
                Utils.showNotification('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!', 'success');
                await this.loadInventory();
                
                // –í –∫–æ–Ω—Å–æ–ª–∏ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—å –æ –≤—ã–≤–æ–¥–µ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${currentUser.username} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞: ${item.itemId?.name || item.itemName}`);
            }
        } catch (error) {
            console.error('Failed to withdraw item:', error);
        } finally {
            Utils.hideLoading();
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
function sellInventoryItem(itemId) {
    inventoryManager.sellInventoryItem(itemId);
}

function withdrawItem(itemId) {
    inventoryManager.withdrawItem(itemId);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
let inventoryManager;

document.addEventListener('DOMContentLoaded', () => {
    inventoryManager = new InventoryManager();
});